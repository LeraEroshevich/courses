import org.junit.jupiter.api.Test;

public class Variant4 {

    @Test
    void task1() {
        /*
        Согласно документации Swagger, напишите тест на этот эндпоинт
        https://petstore.swagger.io/#/user/createUsersWithListInput для POST метода.

        Тест должен быть оформлен с использованием подхода Object comparable, в тело запроса поступаем
        сериализованная модель данных в виде класса.

        В этом задании вам надо передать массив пользователей в тело запроса. Массив должен содержать больше 1 юзера.

        Из тела ответа вам надо десериализовать json ответ обратно в класс, который будет соответствовать
        структуре JSON ответа.

        Тест должен проверять, что статус код 200, concept-type JSON и поле code в теле ответа тоже 200.

         */
    }

    @Test
    void task2() {
        /*
        Создайте тест, который делает GET запрос по эндпоинту https://reqres.in/api/unknown

        Тест должен быть оформлен с использованием подхода Object comparable, из тела ответа вам надо десериализовать json ответ обратно в класс.
        Перед этим вам надо создать класс, который будет подходить по структуру к ответу в JSON.

        Тест должен проверять, что статус код 200 и concept-type JSON.

        Вам надо получить всех юзеров из поля data, затем с помощью Stream API сделать маппинг полей color.
        В этом же стриме оставить только те color, который содержат # (сделать это можно через промежуточный метод filter).
        В конце вам надо привести этот стрим в коллекцию строк, которая будет содержать только color с #.

        Вторая ваша проверка должна сравнивать размер коллекции color из стрима с размером коллекции поля data.
        Тем самым мы поймём, что у каждого юзера в коллекции data есть color с #.
         */
    }

    @Test
    void task3() {
        /*
        Создайте тест, который делает GET запрос по эндпоинту https://reqres.in/api/unknown/23
        Тест должен проверять, что статус код 404 и concept-type JSON.
         */
    }
}
