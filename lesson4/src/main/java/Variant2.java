public class Variant2 {
    /*
     //Task 2
     //Почему нельзя получить элемент из списка ниже?
            public static <T> T getFirst(List<? super T> list) {
                return list.get(0);
            }
            Этот код не работает, потому что он пытается получить элемент из списка,
            содержащего элементы любого типа, который является супертипом типа T.
            Но тип T может быть подтипом (наследником) типа, ограниченного параметром super в списке,
            что может привести к ошибке компиляции или выполнения, если в списке находится элемент,
            который не является экземпляром типа T или его подтипов.
         */

   /* @Test
    void task3() {
        /*
        В системе есть пользователь, пусть это будет класс User.
        Добавим в систему еще 5 классов, Ticket, TicketBus, TicketCinema, TicketMuseum и TicketTrain
        Система фиксирует место куда пользователь едет по билету и место от куда он едет.
        Вам необходимо модифицировать класс User так, что бы можно было использовать только TicketTrain, Ticket и TicketBus.
        Так же в конструкторе класса User должна быть реализована проверка на null,
         это значение одного или второго параметра конструкторе null, то система должна выкинуть кастомный
         эксепшен с текстом 'Билет не может быть null'

        Как видно из примера ниже, можно установить любые классы
        Ticket ticket1 = new Ticket();
        Ticket ticket2 = new Ticket();
        User user = new User(new TicketCinema(), ticket2);
        */

}



