import org.junit.jupiter.api.Test;

public class CompanyUrlTest {
    @Test
    void task1() {
        /*
        Спарсите помощью SAX значения всех параметров companySite из файла employee.xml.
        После того как все url будут спаршены, вам надо написать 3 теста в каждом тесте будет 3 шага.
        1. Перейти в спаршеному url
        2. Проверить, что текущий url действительно сходиться с тем что в xml файле.
        3. Проверьте, что класс который вернулся после вызова метода open действительно является классом того сайта компании,
        который вы открывали.
        Шаг с открытием самого браузера вынесите в отдельный метод, который будет исполняться до каждого теста.

        Создайте для каждой компании отдельный класс, которы бы мы считали как класс главной страницы компании.

        Создайте интерфейс Action в котором у вас будет один метод open.
        Логика первого шага у вас должна быть инкапсулирована в метод open.
        Метод должен принимать просто строку, в которую мы будем передавать адрес компании.
        Интерфейс Action должен быть реализован в каждом классе главной страницы компании.
        Так же метод должен возвращать тот инстанс класса (грубо говоря тот класс) в котором он реализован.
        Например, метод open реализован в классе EpamPage или как то так. Значит open должен иметь логику перехода на сайт
        и возвращать этот же EpamPage класс.

        Подсказка.

        Подумайте каким способом можно сделать так что бы метод open описанный в интерфейсе Action мог возвращать тот класс
        в котором он реализован.
        Вам следует понимать, у вас уже идёт часть автоматизации на курсе и вам следует применять все значния которые вы получили
        на часте по Java.
        Если вы внимания слушали тему про ООП, то сможете написать правильно это задание.


        Продолжение задания.

        Для шага 2 используйте Assertions из junit5.
        Для шага 3 тоже используйте метод assertInstanceOf тоже из Assertions junit5,

         */
    }
}
